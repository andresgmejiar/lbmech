% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions.R
\name{makeCorridor}
\alias{makeCorridor}
\title{Calculate cost corridors for a path}
\usage{
makeCorridor(rasters = tempdir(), order, costs = "all")
}
\arguments{
\item{rasters}{One of either a character string or list of
RasterStacks. If character string, it represents the filepath
to the workspace used as \code{dir} for the previous functions.
Default is \code{tempdir()} but unless you are not following best
practices you will have to change it to your output directory. If list
of RasterStacks, it should be the output (or identical in form) to
the \code{\link[lbmech]{getCosts}} function with \code{"object" \%in\% output}.}

\item{order}{A character vector containing the desired path in
order of visited nodes. For example, to visit "A" then "B" then "C" then "A"
the vector would be \code{c("A","B","C","A")}. Note that these MUST correspond
to the ID names for the \code{from} features used in the \code{\link[lbmech]{getCosts}}
function and must have previously been calculated}

\item{costs}{A character vector containing any combination of the strings
\code{c("time","work","energy")} if the input world data.table is the
output of of the \code{\link[lbmech]{calculateCosts}} function. Otherwise
a character string or vector containing the names of the columns where the 
cost values are stored in the custom-produced data.table.
This selects which types of costs will be calculated.
\code{costs = 'all'} is shorthand for \code{costs = c("time","work","energy")}
while \code{costs = 'energetics'} is shorthand for \code{c("work","energy")}.
Default is \code{'all'}. Note that these must have previously been calculated.}
}
\value{
Rasters representing cost corridors.
If \code{length(costs) == 1}, a RasterLayer. If \code{length(costs) > 1}
a list of RasterLayers with one slot for each \code{cost}.
}
\description{
A function to automatically perform the raster arithmetic
necessary to calculate the cost-of-travel for paths with multiple
waypoints, and the predicted cost of taking a detour to any
arbitrary point in the landscape (a 'corridor').
\code{\link[lbmech]{getCosts}} must have been run before this tool can be used.
}
\examples{
# Generate a DEM
n <- 5
dem <- expand.grid(list(x = 1:(n * 100),
                        y = 1:(n * 100))) / 100
dem <- as.data.table(dem)
dem[, z := 250 * exp(-(x - n/2)^2) + 
      250 * exp(-(y - n/2)^2)]
dem <- rasterFromXYZ(dem)
extent(dem) <- c(10000, 20000, 30000, 40000)
crs(dem) <- "+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +datum=WGS84"

# Export it so it doesn't just exist on the memory
dir <- tempdir()
writeRaster(dem, paste0(dir,"/DEM.tif"),format="GTiff",overwrite=TRUE)


# Import raster, get the grid
dem <- raster(paste0(dir,"/DEM.tif"))
grid <- makeGrid(dem = dem, nx = n, ny = n)

# Import the data lying between x = (12000,16000) and y = (32000,36000)
region <- extent(c(12000,16000,32000,36000))
region <- as(region,"SpatialPolygons")
crs(region) <- crs(grid)


# Use the canonical parameters for a human in Tobler's Function
world <- calculateCosts(world = grid, m = 60, v_max = 1.5,
                        k = 3.5, alpha = -0.05, BMR = 93,
                        l_s = 1.6, L = 0.8, region = region, z_fix = dem,
                        cut_slope = 0.5, dir = dir)
                        
# Generate five random points that fall within the region
points <- data.table(ID = 1:5,
                     x = runif(5, extent(region)[1], extent(region)[2]),
                     y = runif(5, extent(region)[3], extent(region)[4]))
                     
# Calculate cost rasters
costRasters <- getCosts(world = world, from = points, z_fix = dem,
                        destination = 'all', costs = 'all',
                        output = c("object","file"), dir = dir)
                        
#### Example 1:
# Calculating the corridors from a list of RasterStacks,
# with path 1 -> 2 -> 4 -> 1 -> 5
corridors <- makeCorridor(rasters = costRasters, order = c(1,2,5,1,4))

#### Example 2:
# Calculating the corridors from a workspace directory
# with path 1 -> 2 -> 4 -> 1 -> 5
corridors <- makeCorridor(rasters = dir, order = c(1,2,5,1,4))
}
