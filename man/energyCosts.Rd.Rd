% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Functions.R
\name{energyCosts.Rd}
\alias{energyCosts.Rd}
\alias{timeCosts}
\alias{energyCosts}
\title{Calculate time and energy costs}
\usage{
timeCosts(dt, v_max, k, alpha)

energyCosts(
  dt,
  method = "kuo",
  m = NULL,
  BMR = NULL,
  g = 9.81,
  epsilon = 0.2,
  l_s = NULL,
  L = NULL,
  gamma = NULL,
  time = timeCosts,
  ...
)
}
\arguments{
\item{dt}{A data.table containing at minimum columns 'dz' representing
the change in elevation and 'dl' representing planimetric distance}

\item{v_max}{The maximum velocity of the animal moving across the landscape,
in meters per second; see \code{\link[lbmech]{getVelocity}}.}

\item{k}{The topographic sensitivity factor; see \code{\link[lbmech]{getVelocity}}.}

\item{alpha}{The dimensionless slope of maximum velocity;
see \code{\link[lbmech]{getVelocity}}.}

\item{method}{A character string for the method that energy costs per
unit stride should be calculated. one of \code{method \%in\% c('kuo','heglund','oscillator')}.}

\item{m}{The mass of the animal moving across the landscape, in kilograms.}

\item{BMR}{The base metabolic rate of the object moving across the landscape
in Joules per second.}

\item{g}{The acceleration due to gravity, in meters per second per second.
Default is \code{g = 9.81} m/s^2, as for the surface of planet Earth.}

\item{epsilon}{The biomechanical efficiency factor for an animal moving across
the landscape. Default is \code{epsilon = 0.2}.}

\item{l_s}{The average stride length, in meters. Required for
\code{method =  'kuo'} or \code{'oscillator'}, ignored for \code{'heglund'}}

\item{L}{The average leg length. Required for \code{method =  'kuo'},
ignored for \code{'heglund'} and \code{'oscillator'}.}

\item{gamma}{The fractional maximal deviation from average velocity per stride.
Required for \code{method = 'oscillator'}, ignored for \code{'kuo'} and \code{'heglund'}.}

\item{time}{The method by which time costs should be calculated by \code{energyCosts}
should \code{c('dt','dl_t')} not be column names in the input data.table. 
Default is \code{time = timeCosts}.}

\item{...}{Additional parameters to pass to \code{timeCosts}}
}
\value{
For \code{timeCosts}, A data.table object with two columns:

(1) \code{$dl_t} The predicted walking speed in meters per second
when walking between the \code{from} and \code{to} cells

(2) \code{$dt} The predicted amount of time spent walking between
the \code{from} and \code{to} cells

For \code{energyCosts}, a data.table object with five columns:

(1) \code{$dt} The predicted amount of time spent walking between
the \code{from} and \code{to} cells

(2) \code{$dU_l} The predicted work against gravitational potential energy
in Joules when walking between the \code{from} and \code{to} cells

(3) \code{$dK_l} The predicted kinematic work in Joules when walking
between the \code{from} and \code{to} cells

(4) \code{$dW_l} The total predicted energy lost due to biomechanical
work when walking between the \code{from} and \code{to} cells.

(5) \code{$dE_l} The net metabolic expenditure exerted when walking
between the \code{from} and \code{to} cells.
}
\description{
A function that for a given world of possible movement calculates
the transition cost for each in terms of a pre-defined time, work, and energy 
cost functions. \code{energyCosts} calls \code{timeCosts} if columns
named \code{'dt'} and \code{'dl_t'} are not present in the input data.table
}
\examples{
# Generate a DEM
n <- 5
dem <- expand.grid(list(x = 1:(n * 100),
                        y = 1:(n * 100))) / 100
dem <- as.data.table(dem)
dem[, z := 250 * exp(-(x - n/2)^2) + 
      250 * exp(-(y - n/2)^2)]
dem <- rast(dem)
ext(dem) <- c(10000, 20000, 30000, 40000)
crs(dem) <- "+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +datum=WGS84"

# Export it so it doesn't just exist on the memory
dir <- tempdir()
writeRaster(dem, paste0(dir,"/DEM.tif"),overwrite=TRUE)


# Import raster, get the grid
dem <- rast(paste0(dir,"/DEM.tif"))
grid <- makeGrid(dem = dem, nx = n, ny = n, sources = TRUE)

# Select all tiles that exist between x = (12000,16000) and y = (32000,36000)
tiles <- ext(c(12000,16000,32000,36000))
tiles <- as.polygons(tiles)
crs(tiles) <- crs(grid)
tiles <- whichTiles(region = tiles, polys = grid)

# Make a world but limit it to the DEM grid size
defineWorld(source = grid, cut_slope = 0.5, 
            res = res(dem), dir = dir, overwrite=TRUE)

# Calculate the energetic and temporal costs
calculateCosts(costFUN = energyCosts, 
tiles = tiles, dir = dir,
m = 70, v_max = 1.5, BMR = 76, k = 3.5, alpha = 0.05, l_s = 1,
L = 0.8)
}
